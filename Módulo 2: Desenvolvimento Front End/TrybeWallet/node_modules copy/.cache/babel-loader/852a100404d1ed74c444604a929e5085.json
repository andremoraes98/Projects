{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapCell = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst wrapString_1 = require(\"./wrapString\");\n\nconst wrapWord_1 = require(\"./wrapWord\");\n/**\n * Wrap a single cell value into a list of lines\n *\n * Always wraps on newlines, for the remainder uses either word or string wrapping\n * depending on user configuration.\n *\n */\n\n\nconst wrapCell = (cellValue, cellWidth, useWrapWord) => {\n  // First split on literal newlines\n  const cellLines = (0, utils_1.splitAnsi)(cellValue); // Then iterate over the list and word-wrap every remaining line if necessary.\n\n  for (let lineNr = 0; lineNr < cellLines.length;) {\n    let lineChunks;\n\n    if (useWrapWord) {\n      lineChunks = (0, wrapWord_1.wrapWord)(cellLines[lineNr], cellWidth);\n    } else {\n      lineChunks = (0, wrapString_1.wrapString)(cellLines[lineNr], cellWidth);\n    } // Replace our original array element with whatever the wrapping returned\n\n\n    cellLines.splice(lineNr, 1, ...lineChunks);\n    lineNr += lineChunks.length;\n  }\n\n  return cellLines;\n};\n\nexports.wrapCell = wrapCell;","map":{"version":3,"sources":["/home/andre/Documentos/Projetos/sd-019-b-project-trybewallet/node_modules/stylelint/node_modules/table/dist/src/wrapCell.js"],"names":["Object","defineProperty","exports","value","wrapCell","utils_1","require","wrapString_1","wrapWord_1","cellValue","cellWidth","useWrapWord","cellLines","splitAnsi","lineNr","length","lineChunks","wrapWord","wrapString","splice"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,QAAQ,GAAG,CAACK,SAAD,EAAYC,SAAZ,EAAuBC,WAAvB,KAAuC;AACpD;AACA,QAAMC,SAAS,GAAG,CAAC,GAAGP,OAAO,CAACQ,SAAZ,EAAuBJ,SAAvB,CAAlB,CAFoD,CAGpD;;AACA,OAAK,IAAIK,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGF,SAAS,CAACG,MAAxC,GAAiD;AAC7C,QAAIC,UAAJ;;AACA,QAAIL,WAAJ,EAAiB;AACbK,MAAAA,UAAU,GAAG,CAAC,GAAGR,UAAU,CAACS,QAAf,EAAyBL,SAAS,CAACE,MAAD,CAAlC,EAA4CJ,SAA5C,CAAb;AACH,KAFD,MAGK;AACDM,MAAAA,UAAU,GAAG,CAAC,GAAGT,YAAY,CAACW,UAAjB,EAA6BN,SAAS,CAACE,MAAD,CAAtC,EAAgDJ,SAAhD,CAAb;AACH,KAP4C,CAQ7C;;;AACAE,IAAAA,SAAS,CAACO,MAAV,CAAiBL,MAAjB,EAAyB,CAAzB,EAA4B,GAAGE,UAA/B;AACAF,IAAAA,MAAM,IAAIE,UAAU,CAACD,MAArB;AACH;;AACD,SAAOH,SAAP;AACH,CAjBD;;AAkBAV,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapCell = void 0;\nconst utils_1 = require(\"./utils\");\nconst wrapString_1 = require(\"./wrapString\");\nconst wrapWord_1 = require(\"./wrapWord\");\n/**\n * Wrap a single cell value into a list of lines\n *\n * Always wraps on newlines, for the remainder uses either word or string wrapping\n * depending on user configuration.\n *\n */\nconst wrapCell = (cellValue, cellWidth, useWrapWord) => {\n    // First split on literal newlines\n    const cellLines = (0, utils_1.splitAnsi)(cellValue);\n    // Then iterate over the list and word-wrap every remaining line if necessary.\n    for (let lineNr = 0; lineNr < cellLines.length;) {\n        let lineChunks;\n        if (useWrapWord) {\n            lineChunks = (0, wrapWord_1.wrapWord)(cellLines[lineNr], cellWidth);\n        }\n        else {\n            lineChunks = (0, wrapString_1.wrapString)(cellLines[lineNr], cellWidth);\n        }\n        // Replace our original array element with whatever the wrapping returned\n        cellLines.splice(lineNr, 1, ...lineChunks);\n        lineNr += lineChunks.length;\n    }\n    return cellLines;\n};\nexports.wrapCell = wrapCell;\n//# sourceMappingURL=wrapCell.js.map"]},"metadata":{},"sourceType":"script"}