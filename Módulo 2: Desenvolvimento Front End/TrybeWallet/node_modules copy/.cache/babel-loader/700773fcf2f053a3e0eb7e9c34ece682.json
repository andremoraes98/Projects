{"ast":null,"code":"import { START_REQUEST, SAVE_CURRENCY, SAVE_EXPENSE_INFO, DELETE_EXPENSE, EDIT_EXPENSE, CHANGE_EXPENSE } from '../actions';\nconst WALLET_INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isFetching: false,\n  totalValue: 0,\n  expenseValue: 0,\n  wantToEdit: false,\n  selectedExpense: {}\n};\n\nconst wallet = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : WALLET_INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case START_REQUEST:\n      return { ...state,\n        isFetching: true\n      };\n\n    case SAVE_CURRENCY:\n      console.log(action.totalValue);\n      return { ...state,\n        currencies: action.currencies,\n        isFetching: false,\n        totalValue: `${action.totalValue}`\n      };\n\n    case SAVE_EXPENSE_INFO:\n      return { ...state,\n        expenses: [...state.expenses, action.expenseInfos],\n        totalValue: Math.trunc((state.totalValue + action.value) * 100) / 100,\n        expenseValue: action.value\n      };\n\n    case DELETE_EXPENSE:\n      return { ...state,\n        expenses: state.expenses.filter(expense => expense.id !== action.expenseId),\n        totalValue: parseFloat(state.totalValue - action.expenseValue)\n      };\n\n    case EDIT_EXPENSE:\n      return { ...state,\n        wantToEdit: true,\n        selectedExpense: state.expenses[action.expenseId]\n      };\n\n    case CHANGE_EXPENSE:\n      return { ...state,\n        wantToEdit: false,\n        expenses: state.expenses.map(expense => expense.id === action.editedExpense.id ? action.editedExpense : expense)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default wallet;","map":{"version":3,"sources":["/home/andre/Documentos/Projetos/sd-019-b-project-trybewallet/src/reducers/wallet.js"],"names":["START_REQUEST","SAVE_CURRENCY","SAVE_EXPENSE_INFO","DELETE_EXPENSE","EDIT_EXPENSE","CHANGE_EXPENSE","WALLET_INITIAL_STATE","currencies","expenses","isFetching","totalValue","expenseValue","wantToEdit","selectedExpense","wallet","state","action","type","console","log","expenseInfos","Math","trunc","value","filter","expense","id","expenseId","parseFloat","map","editedExpense"],"mappings":"AAAA,SACEA,aADF,EAEEC,aAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,cANF,QAMwB,YANxB;AAQA,MAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,UAAU,EAAE,EADe;AAE3BC,EAAAA,QAAQ,EAAE,EAFiB;AAG3BC,EAAAA,UAAU,EAAE,KAHe;AAI3BC,EAAAA,UAAU,EAAE,CAJe;AAK3BC,EAAAA,YAAY,EAAE,CALa;AAM3BC,EAAAA,UAAU,EAAE,KANe;AAO3BC,EAAAA,eAAe,EAAE;AAPU,CAA7B;;AAUA,MAAMC,MAAM,GAAG,YAA0C;AAAA,MAAzCC,KAAyC,uEAAjCT,oBAAiC;AAAA,MAAXU,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKjB,aAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELN,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAKR,aAAL;AACEiB,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACN,UAAnB;AACA,aAAO,EACL,GAAGK,KADE;AAELR,QAAAA,UAAU,EAAES,MAAM,CAACT,UAFd;AAGLE,QAAAA,UAAU,EAAE,KAHP;AAILC,QAAAA,UAAU,EAAG,GAAEM,MAAM,CAACN,UAAW;AAJ5B,OAAP;;AAMF,SAAKR,iBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELP,QAAAA,QAAQ,EAAE,CAAC,GAAGO,KAAK,CAACP,QAAV,EAAoBQ,MAAM,CAACI,YAA3B,CAFL;AAGLV,QAAAA,UAAU,EAAEW,IAAI,CAACC,KAAL,CAAW,CAACP,KAAK,CAACL,UAAN,GAAmBM,MAAM,CAACO,KAA3B,IAAoC,GAA/C,IAAsD,GAH7D;AAILZ,QAAAA,YAAY,EAAEK,MAAM,CAACO;AAJhB,OAAP;;AAMF,SAAKpB,cAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELP,QAAAA,QAAQ,EAAEO,KAAK,CAACP,QAAN,CAAegB,MAAf,CAAuBC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeV,MAAM,CAACW,SAAzD,CAFL;AAGLjB,QAAAA,UAAU,EAAEkB,UAAU,CAACb,KAAK,CAACL,UAAN,GAAmBM,MAAM,CAACL,YAA3B;AAHjB,OAAP;;AAKF,SAAKP,YAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELH,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,eAAe,EAAEE,KAAK,CAACP,QAAN,CAAeQ,MAAM,CAACW,SAAtB;AAHZ,OAAP;;AAKF,SAAKtB,cAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELH,QAAAA,UAAU,EAAE,KAFP;AAGLJ,QAAAA,QAAQ,EAAEO,KAAK,CAACP,QAAN,CAAeqB,GAAf,CAAoBJ,OAAD,IAAcA,OAAO,CAACC,EAAR,KAAeV,MAAM,CAACc,aAAP,CAAqBJ,EAApC,GACvCV,MAAM,CAACc,aADgC,GAEvCL,OAFM;AAHL,OAAP;;AAOF;AACE,aAAOV,KAAP;AA1CF;AA4CD,CA7CD;;AA+CA,eAAeD,MAAf","sourcesContent":["import {\n  START_REQUEST,\n  SAVE_CURRENCY,\n  SAVE_EXPENSE_INFO,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n  CHANGE_EXPENSE } from '../actions';\n\nconst WALLET_INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isFetching: false,\n  totalValue: 0,\n  expenseValue: 0,\n  wantToEdit: false,\n  selectedExpense: {},\n};\n\nconst wallet = (state = WALLET_INITIAL_STATE, action) => {\n  switch (action.type) {\n  case START_REQUEST:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case SAVE_CURRENCY:\n    console.log(action.totalValue);\n    return {\n      ...state,\n      currencies: action.currencies,\n      isFetching: false,\n      totalValue: `${action.totalValue}`,\n    };\n  case SAVE_EXPENSE_INFO:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenseInfos],\n      totalValue: Math.trunc((state.totalValue + action.value) * 100) / 100,\n      expenseValue: action.value,\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.expenseId),\n      totalValue: parseFloat(state.totalValue - action.expenseValue),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      wantToEdit: true,\n      selectedExpense: state.expenses[action.expenseId],\n    };\n  case CHANGE_EXPENSE:\n    return {\n      ...state,\n      wantToEdit: false,\n      expenses: state.expenses.map((expense) => (expense.id === action.editedExpense.id\n        ? action.editedExpense\n        : expense)),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n"]},"metadata":{},"sourceType":"module"}