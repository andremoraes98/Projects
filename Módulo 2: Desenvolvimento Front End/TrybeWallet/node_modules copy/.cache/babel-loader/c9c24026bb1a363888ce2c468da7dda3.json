{"ast":null,"code":"export const SAVE_EMAIL = 'SAVE_EMAIL';\nexport const START_REQUEST = 'START_REQUEST';\nexport const SAVE_CURRENCY = 'SAVE_CURRENCY';\nexport const SAVE_ECONOMY_CURRENCY = 'SAVE_ECONOMY_CURRENCY';\nexport const SAVE_EXPENSE_INFO = 'SAVE_EXPENSE_INFO';\nconst URL_ECONOMIA = 'https://economia.awesomeapi.com.br/json/all';\nexport const saveEmail = email => ({\n  type: SAVE_EMAIL,\n  email\n});\nexport const requestJSON = () => ({\n  type: START_REQUEST\n});\nexport const getInitialsOfCurrency = currencies => ({\n  type: SAVE_CURRENCY,\n  currencies\n});\nexport const fetchCurrencyJSONFromAPI = () => async dispatch => {\n  dispatch(requestJSON());\n  const response = await fetch(URL_ECONOMIA);\n  const data = await response.json();\n  const dataWithOutUSDT = Object.keys(data).filter(currency => currency !== 'USDT');\n  return dispatch(getInitialsOfCurrency(dataWithOutUSDT));\n};\nexport const saveExpenseInfos = (id, expenseInfos, exchangeRates) => {\n  const valueCurrencyInBRL = Object.entries(exchangeRates).filter(currency => currency[0] === expenseInfos.currency);\n  console.log();\n  return {\n    type: SAVE_EXPENSE_INFO,\n    expenseInfos: {\n      id,\n      ...expenseInfos,\n      exchangeRates\n    },\n    value: Number.isNaN(parseFloat(expenseInfos.value)) ? 0 : parseFloat(expenseInfos.value) * valueCurrencyInBRL[0][1].ask\n  };\n};\nexport const fetchEconomyJSONFromAPI = (id, expenseInfos) => async dispatch => {\n  dispatch(requestJSON());\n  const response = await fetch(URL_ECONOMIA);\n  const data = await response.json();\n  return dispatch(saveExpenseInfos(id, expenseInfos, data));\n};","map":{"version":3,"sources":["/home/andre/Documentos/Projetos/sd-019-b-project-trybewallet/src/actions/index.js"],"names":["SAVE_EMAIL","START_REQUEST","SAVE_CURRENCY","SAVE_ECONOMY_CURRENCY","SAVE_EXPENSE_INFO","URL_ECONOMIA","saveEmail","email","type","requestJSON","getInitialsOfCurrency","currencies","fetchCurrencyJSONFromAPI","dispatch","response","fetch","data","json","dataWithOutUSDT","Object","keys","filter","currency","saveExpenseInfos","id","expenseInfos","exchangeRates","valueCurrencyInBRL","entries","console","log","value","Number","isNaN","parseFloat","ask","fetchEconomyJSONFromAPI"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,MAAMC,YAAY,GAAG,6CAArB;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAD,KAAY;AACnCC,EAAAA,IAAI,EAAER,UAD6B;AAEnCO,EAAAA;AAFmC,CAAZ,CAAlB;AAKP,OAAO,MAAME,WAAW,GAAG,OAAO;AAChCD,EAAAA,IAAI,EAAEP;AAD0B,CAAP,CAApB;AAIP,OAAO,MAAMS,qBAAqB,GAAIC,UAAD,KAAiB;AACpDH,EAAAA,IAAI,EAAEN,aAD8C;AAEpDS,EAAAA;AAFoD,CAAjB,CAA9B;AAKP,OAAO,MAAMC,wBAAwB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChEA,EAAAA,QAAQ,CAACJ,WAAW,EAAZ,CAAR;AACA,QAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACV,YAAD,CAA5B;AACA,QAAMW,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,QAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,MAAlB,CAA0BC,QAAD,IAAcA,QAAQ,KAAK,MAApD,CAAxB;AACA,SAAOT,QAAQ,CAACH,qBAAqB,CAACQ,eAAD,CAAtB,CAAf;AACD,CANM;AAQP,OAAO,MAAMK,gBAAgB,GAAG,CAACC,EAAD,EAAKC,YAAL,EAAmBC,aAAnB,KAAqC;AACnE,QAAMC,kBAAkB,GAAGR,MAAM,CAACS,OAAP,CAAeF,aAAf,EACxBL,MADwB,CAChBC,QAAD,IAAcA,QAAQ,CAAC,CAAD,CAAR,KAAgBG,YAAY,CAACH,QAD1B,CAA3B;AAEAO,EAAAA,OAAO,CAACC,GAAR;AACA,SAAQ;AACNtB,IAAAA,IAAI,EAAEJ,iBADA;AAENqB,IAAAA,YAAY,EAAE;AACZD,MAAAA,EADY;AAEZ,SAAGC,YAFS;AAGZC,MAAAA;AAHY,KAFR;AAONK,IAAAA,KAAK,EACHC,MAAM,CAACC,KAAP,CAAaC,UAAU,CAACT,YAAY,CAACM,KAAd,CAAvB,IACI,CADJ,GAEIG,UAAU,CAACT,YAAY,CAACM,KAAd,CAAV,GAAkCJ,kBAAkB,CAAC,CAAD,CAAlB,CAAsB,CAAtB,EAAyBQ;AAV3D,GAAR;AAaD,CAjBM;AAmBP,OAAO,MAAMC,uBAAuB,GAAG,CAACZ,EAAD,EAAKC,YAAL,KAAsB,MAAOZ,QAAP,IAAoB;AAC/EA,EAAAA,QAAQ,CAACJ,WAAW,EAAZ,CAAR;AACA,QAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACV,YAAD,CAA5B;AACA,QAAMW,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAOJ,QAAQ,CAACU,gBAAgB,CAACC,EAAD,EAAKC,YAAL,EAAmBT,IAAnB,CAAjB,CAAf;AACD,CALM","sourcesContent":["export const SAVE_EMAIL = 'SAVE_EMAIL';\nexport const START_REQUEST = 'START_REQUEST';\nexport const SAVE_CURRENCY = 'SAVE_CURRENCY';\nexport const SAVE_ECONOMY_CURRENCY = 'SAVE_ECONOMY_CURRENCY';\nexport const SAVE_EXPENSE_INFO = 'SAVE_EXPENSE_INFO';\nconst URL_ECONOMIA = 'https://economia.awesomeapi.com.br/json/all';\n\nexport const saveEmail = (email) => ({\n  type: SAVE_EMAIL,\n  email,\n});\n\nexport const requestJSON = () => ({\n  type: START_REQUEST,\n});\n\nexport const getInitialsOfCurrency = (currencies) => ({\n  type: SAVE_CURRENCY,\n  currencies,\n});\n\nexport const fetchCurrencyJSONFromAPI = () => async (dispatch) => {\n  dispatch(requestJSON());\n  const response = await fetch(URL_ECONOMIA);\n  const data = await response.json();\n  const dataWithOutUSDT = Object.keys(data).filter((currency) => currency !== 'USDT');\n  return dispatch(getInitialsOfCurrency(dataWithOutUSDT));\n};\n\nexport const saveExpenseInfos = (id, expenseInfos, exchangeRates) => {\n  const valueCurrencyInBRL = Object.entries(exchangeRates)\n    .filter((currency) => currency[0] === expenseInfos.currency);\n  console.log();\n  return ({\n    type: SAVE_EXPENSE_INFO,\n    expenseInfos: {\n      id,\n      ...expenseInfos,\n      exchangeRates,\n    },\n    value: (\n      Number.isNaN(parseFloat(expenseInfos.value))\n        ? 0\n        : parseFloat(expenseInfos.value) * (valueCurrencyInBRL[0][1].ask)\n    ),\n  });\n};\n\nexport const fetchEconomyJSONFromAPI = (id, expenseInfos) => async (dispatch) => {\n  dispatch(requestJSON());\n  const response = await fetch(URL_ECONOMIA);\n  const data = await response.json();\n  return dispatch(saveExpenseInfos(id, expenseInfos, data));\n};\n"]},"metadata":{},"sourceType":"module"}