{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignString = void 0;\n\nconst string_width_1 = __importDefault(require(\"string-width\"));\n\nconst utils_1 = require(\"./utils\");\n\nconst alignLeft = (subject, width) => {\n  return subject + ' '.repeat(width);\n};\n\nconst alignRight = (subject, width) => {\n  return ' '.repeat(width) + subject;\n};\n\nconst alignCenter = (subject, width) => {\n  return ' '.repeat(Math.floor(width / 2)) + subject + ' '.repeat(Math.ceil(width / 2));\n};\n\nconst alignJustify = (subject, width) => {\n  const spaceSequenceCount = (0, utils_1.countSpaceSequence)(subject);\n\n  if (spaceSequenceCount === 0) {\n    return alignLeft(subject, width);\n  }\n\n  const addingSpaces = (0, utils_1.distributeUnevenly)(width, spaceSequenceCount);\n\n  if (Math.max(...addingSpaces) > 3) {\n    return alignLeft(subject, width);\n  }\n\n  let spaceSequenceIndex = 0;\n  return subject.replace(/\\s+/g, groupSpace => {\n    return groupSpace + ' '.repeat(addingSpaces[spaceSequenceIndex++]);\n  });\n};\n/**\n * Pads a string to the left and/or right to position the subject\n * text in a desired alignment within a container.\n */\n\n\nconst alignString = (subject, containerWidth, alignment) => {\n  const subjectWidth = (0, string_width_1.default)(subject);\n\n  if (subjectWidth === containerWidth) {\n    return subject;\n  }\n\n  if (subjectWidth > containerWidth) {\n    throw new Error('Subject parameter value width cannot be greater than the container width.');\n  }\n\n  if (subjectWidth === 0) {\n    return ' '.repeat(containerWidth);\n  }\n\n  const availableWidth = containerWidth - subjectWidth;\n\n  if (alignment === 'left') {\n    return alignLeft(subject, availableWidth);\n  }\n\n  if (alignment === 'right') {\n    return alignRight(subject, availableWidth);\n  }\n\n  if (alignment === 'justify') {\n    return alignJustify(subject, availableWidth);\n  }\n\n  return alignCenter(subject, availableWidth);\n};\n\nexports.alignString = alignString;","map":{"version":3,"sources":["/home/andre/Documentos/Projetos/sd-019-b-project-trybewallet/node_modules/stylelint/node_modules/table/dist/src/alignString.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","alignString","string_width_1","require","utils_1","alignLeft","subject","width","repeat","alignRight","alignCenter","Math","floor","ceil","alignJustify","spaceSequenceCount","countSpaceSequence","addingSpaces","distributeUnevenly","max","spaceSequenceIndex","replace","groupSpace","containerWidth","alignment","subjectWidth","default","Error","availableWidth"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.alignString = void 0;\nconst string_width_1 = __importDefault(require(\"string-width\"));\nconst utils_1 = require(\"./utils\");\nconst alignLeft = (subject, width) => {\n    return subject + ' '.repeat(width);\n};\nconst alignRight = (subject, width) => {\n    return ' '.repeat(width) + subject;\n};\nconst alignCenter = (subject, width) => {\n    return ' '.repeat(Math.floor(width / 2)) + subject + ' '.repeat(Math.ceil(width / 2));\n};\nconst alignJustify = (subject, width) => {\n    const spaceSequenceCount = (0, utils_1.countSpaceSequence)(subject);\n    if (spaceSequenceCount === 0) {\n        return alignLeft(subject, width);\n    }\n    const addingSpaces = (0, utils_1.distributeUnevenly)(width, spaceSequenceCount);\n    if (Math.max(...addingSpaces) > 3) {\n        return alignLeft(subject, width);\n    }\n    let spaceSequenceIndex = 0;\n    return subject.replace(/\\s+/g, (groupSpace) => {\n        return groupSpace + ' '.repeat(addingSpaces[spaceSequenceIndex++]);\n    });\n};\n/**\n * Pads a string to the left and/or right to position the subject\n * text in a desired alignment within a container.\n */\nconst alignString = (subject, containerWidth, alignment) => {\n    const subjectWidth = (0, string_width_1.default)(subject);\n    if (subjectWidth === containerWidth) {\n        return subject;\n    }\n    if (subjectWidth > containerWidth) {\n        throw new Error('Subject parameter value width cannot be greater than the container width.');\n    }\n    if (subjectWidth === 0) {\n        return ' '.repeat(containerWidth);\n    }\n    const availableWidth = containerWidth - subjectWidth;\n    if (alignment === 'left') {\n        return alignLeft(subject, availableWidth);\n    }\n    if (alignment === 'right') {\n        return alignRight(subject, availableWidth);\n    }\n    if (alignment === 'justify') {\n        return alignJustify(subject, availableWidth);\n    }\n    return alignCenter(subject, availableWidth);\n};\nexports.alignString = alignString;\n//# sourceMappingURL=alignString.js.map"]},"metadata":{},"sourceType":"script"}