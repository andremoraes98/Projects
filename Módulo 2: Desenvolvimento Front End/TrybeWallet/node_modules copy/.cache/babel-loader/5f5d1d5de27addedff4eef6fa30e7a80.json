{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapString = void 0;\n\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\n\nconst string_width_1 = __importDefault(require(\"string-width\"));\n/**\n * Creates an array of strings split into groups the length of size.\n * This function works with strings that contain ASCII characters.\n *\n * wrapText is different from would-be \"chunk\" implementation\n * in that whitespace characters that occur on a chunk size limit are trimmed.\n *\n */\n\n\nconst wrapString = (subject, size) => {\n  let subjectSlice = subject;\n  const chunks = [];\n\n  do {\n    chunks.push((0, slice_ansi_1.default)(subjectSlice, 0, size));\n    subjectSlice = (0, slice_ansi_1.default)(subjectSlice, size).trim();\n  } while ((0, string_width_1.default)(subjectSlice));\n\n  return chunks;\n};\n\nexports.wrapString = wrapString;","map":{"version":3,"sources":["/home/andre/Documentos/Projetos/sd-019-b-project-trybewallet/node_modules/stylelint/node_modules/table/dist/src/wrapString.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","wrapString","slice_ansi_1","require","string_width_1","subject","size","subjectSlice","chunks","push","default","trim"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,YAAY,GAAGR,eAAe,CAACS,OAAO,CAAC,YAAD,CAAR,CAApC;;AACA,MAAMC,cAAc,GAAGV,eAAe,CAACS,OAAO,CAAC,cAAD,CAAR,CAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,UAAU,GAAG,CAACI,OAAD,EAAUC,IAAV,KAAmB;AAClC,MAAIC,YAAY,GAAGF,OAAnB;AACA,QAAMG,MAAM,GAAG,EAAf;;AACA,KAAG;AACCA,IAAAA,MAAM,CAACC,IAAP,CAAY,CAAC,GAAGP,YAAY,CAACQ,OAAjB,EAA0BH,YAA1B,EAAwC,CAAxC,EAA2CD,IAA3C,CAAZ;AACAC,IAAAA,YAAY,GAAG,CAAC,GAAGL,YAAY,CAACQ,OAAjB,EAA0BH,YAA1B,EAAwCD,IAAxC,EAA8CK,IAA9C,EAAf;AACH,GAHD,QAGS,CAAC,GAAGP,cAAc,CAACM,OAAnB,EAA4BH,YAA5B,CAHT;;AAIA,SAAOC,MAAP;AACH,CARD;;AASAT,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapString = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst string_width_1 = __importDefault(require(\"string-width\"));\n/**\n * Creates an array of strings split into groups the length of size.\n * This function works with strings that contain ASCII characters.\n *\n * wrapText is different from would-be \"chunk\" implementation\n * in that whitespace characters that occur on a chunk size limit are trimmed.\n *\n */\nconst wrapString = (subject, size) => {\n    let subjectSlice = subject;\n    const chunks = [];\n    do {\n        chunks.push((0, slice_ansi_1.default)(subjectSlice, 0, size));\n        subjectSlice = (0, slice_ansi_1.default)(subjectSlice, size).trim();\n    } while ((0, string_width_1.default)(subjectSlice));\n    return chunks;\n};\nexports.wrapString = wrapString;\n//# sourceMappingURL=wrapString.js.map"]},"metadata":{},"sourceType":"script"}