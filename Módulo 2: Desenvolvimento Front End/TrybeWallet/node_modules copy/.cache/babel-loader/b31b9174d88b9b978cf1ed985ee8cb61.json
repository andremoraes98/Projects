{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateRowHeights = void 0;\n\nconst calculateCellHeight_1 = require(\"./calculateCellHeight\");\n/**\n * Produces an array of values that describe the largest value length (height) in every row.\n */\n\n\nconst calculateRowHeights = (rows, config) => {\n  return rows.map(row => {\n    let rowHeight = 1;\n    row.forEach((cell, cellIndex) => {\n      const cellHeight = (0, calculateCellHeight_1.calculateCellHeight)(cell, config.columns[cellIndex].width, config.columns[cellIndex].wrapWord);\n      rowHeight = Math.max(rowHeight, cellHeight);\n    });\n    return rowHeight;\n  });\n};\n\nexports.calculateRowHeights = calculateRowHeights;","map":{"version":3,"sources":["/home/andre/Documentos/Projetos/sd-019-b-project-trybewallet/node_modules/stylelint/node_modules/table/dist/src/calculateRowHeights.js"],"names":["Object","defineProperty","exports","value","calculateRowHeights","calculateCellHeight_1","require","rows","config","map","row","rowHeight","forEach","cell","cellIndex","cellHeight","calculateCellHeight","columns","width","wrapWord","Math","max"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;;;AACA,MAAMF,mBAAmB,GAAG,CAACG,IAAD,EAAOC,MAAP,KAAkB;AAC1C,SAAOD,IAAI,CAACE,GAAL,CAAUC,GAAD,IAAS;AACrB,QAAIC,SAAS,GAAG,CAAhB;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAY,CAACC,IAAD,EAAOC,SAAP,KAAqB;AAC7B,YAAMC,UAAU,GAAG,CAAC,GAAGV,qBAAqB,CAACW,mBAA1B,EAA+CH,IAA/C,EAAqDL,MAAM,CAACS,OAAP,CAAeH,SAAf,EAA0BI,KAA/E,EAAsFV,MAAM,CAACS,OAAP,CAAeH,SAAf,EAA0BK,QAAhH,CAAnB;AACAR,MAAAA,SAAS,GAAGS,IAAI,CAACC,GAAL,CAASV,SAAT,EAAoBI,UAApB,CAAZ;AACH,KAHD;AAIA,WAAOJ,SAAP;AACH,GAPM,CAAP;AAQH,CATD;;AAUAT,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateRowHeights = void 0;\nconst calculateCellHeight_1 = require(\"./calculateCellHeight\");\n/**\n * Produces an array of values that describe the largest value length (height) in every row.\n */\nconst calculateRowHeights = (rows, config) => {\n    return rows.map((row) => {\n        let rowHeight = 1;\n        row.forEach((cell, cellIndex) => {\n            const cellHeight = (0, calculateCellHeight_1.calculateCellHeight)(cell, config.columns[cellIndex].width, config.columns[cellIndex].wrapWord);\n            rowHeight = Math.max(rowHeight, cellHeight);\n        });\n        return rowHeight;\n    });\n};\nexports.calculateRowHeights = calculateRowHeights;\n//# sourceMappingURL=calculateRowHeights.js.map"]},"metadata":{},"sourceType":"script"}