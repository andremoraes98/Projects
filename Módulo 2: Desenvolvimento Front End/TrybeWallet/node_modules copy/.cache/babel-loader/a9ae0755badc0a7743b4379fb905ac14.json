{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.distributeUnevenly = exports.countSpaceSequence = exports.groupBySizes = exports.makeBorderConfig = exports.splitAnsi = exports.normalizeString = void 0;\n\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\n\nconst string_width_1 = __importDefault(require(\"string-width\"));\n\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\n\nconst getBorderCharacters_1 = require(\"./getBorderCharacters\");\n/**\n * Converts Windows-style newline to Unix-style\n *\n * @internal\n */\n\n\nconst normalizeString = input => {\n  return input.replace(/\\r\\n/g, '\\n');\n};\n\nexports.normalizeString = normalizeString;\n/**\n * Splits ansi string by newlines\n *\n * @internal\n */\n\nconst splitAnsi = input => {\n  const lengths = (0, strip_ansi_1.default)(input).split('\\n').map(string_width_1.default);\n  const result = [];\n  let startIndex = 0;\n  lengths.forEach(length => {\n    result.push(length === 0 ? '' : (0, slice_ansi_1.default)(input, startIndex, startIndex + length)); // Plus 1 for the newline character itself\n\n    startIndex += length + 1;\n  });\n  return result;\n};\n\nexports.splitAnsi = splitAnsi;\n/**\n * Merges user provided border characters with the default border (\"honeywell\") characters.\n *\n * @internal\n */\n\nconst makeBorderConfig = border => {\n  return { ...(0, getBorderCharacters_1.getBorderCharacters)('honeywell'),\n    ...border\n  };\n};\n\nexports.makeBorderConfig = makeBorderConfig;\n/**\n * Groups the array into sub-arrays by sizes.\n *\n * @internal\n * @example\n * groupBySizes(['a', 'b', 'c', 'd', 'e'], [2, 1, 2]) = [ ['a', 'b'], ['c'], ['d', 'e'] ]\n */\n\nconst groupBySizes = (array, sizes) => {\n  let startIndex = 0;\n  return sizes.map(size => {\n    const group = array.slice(startIndex, startIndex + size);\n    startIndex += size;\n    return group;\n  });\n};\n\nexports.groupBySizes = groupBySizes;\n/**\n * Counts the number of continuous spaces in a string\n *\n * @internal\n * @example\n * countGroupSpaces('a  bc  de f') = 3\n */\n\nconst countSpaceSequence = input => {\n  var _a, _b;\n\n  return (_b = (_a = input.match(/\\s+/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n};\n\nexports.countSpaceSequence = countSpaceSequence;\n/**\n * Creates the non-increasing number array given sum and length\n * whose the difference between maximum and minimum is not greater than 1\n *\n * @internal\n * @example\n * distributeUnevenly(6, 3) = [2, 2, 2]\n * distributeUnevenly(8, 3) = [3, 3, 2]\n */\n\nconst distributeUnevenly = (sum, length) => {\n  const result = Array.from({\n    length\n  }).fill(Math.floor(sum / length));\n  return result.map((element, index) => {\n    return element + (index < sum % length ? 1 : 0);\n  });\n};\n\nexports.distributeUnevenly = distributeUnevenly;","map":{"version":3,"sources":["/home/andre/Documentos/Projetos/sd-019-b-project-trybewallet/node_modules/stylelint/node_modules/table/dist/src/utils.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","distributeUnevenly","countSpaceSequence","groupBySizes","makeBorderConfig","splitAnsi","normalizeString","slice_ansi_1","require","string_width_1","strip_ansi_1","getBorderCharacters_1","input","replace","lengths","default","split","map","result","startIndex","forEach","length","push","border","getBorderCharacters","array","sizes","size","group","slice","_a","_b","match","sum","Array","from","fill","Math","floor","element","index"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.distributeUnevenly = exports.countSpaceSequence = exports.groupBySizes = exports.makeBorderConfig = exports.splitAnsi = exports.normalizeString = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst string_width_1 = __importDefault(require(\"string-width\"));\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\nconst getBorderCharacters_1 = require(\"./getBorderCharacters\");\n/**\n * Converts Windows-style newline to Unix-style\n *\n * @internal\n */\nconst normalizeString = (input) => {\n    return input.replace(/\\r\\n/g, '\\n');\n};\nexports.normalizeString = normalizeString;\n/**\n * Splits ansi string by newlines\n *\n * @internal\n */\nconst splitAnsi = (input) => {\n    const lengths = (0, strip_ansi_1.default)(input).split('\\n').map(string_width_1.default);\n    const result = [];\n    let startIndex = 0;\n    lengths.forEach((length) => {\n        result.push(length === 0 ? '' : (0, slice_ansi_1.default)(input, startIndex, startIndex + length));\n        // Plus 1 for the newline character itself\n        startIndex += length + 1;\n    });\n    return result;\n};\nexports.splitAnsi = splitAnsi;\n/**\n * Merges user provided border characters with the default border (\"honeywell\") characters.\n *\n * @internal\n */\nconst makeBorderConfig = (border) => {\n    return {\n        ...(0, getBorderCharacters_1.getBorderCharacters)('honeywell'),\n        ...border,\n    };\n};\nexports.makeBorderConfig = makeBorderConfig;\n/**\n * Groups the array into sub-arrays by sizes.\n *\n * @internal\n * @example\n * groupBySizes(['a', 'b', 'c', 'd', 'e'], [2, 1, 2]) = [ ['a', 'b'], ['c'], ['d', 'e'] ]\n */\nconst groupBySizes = (array, sizes) => {\n    let startIndex = 0;\n    return sizes.map((size) => {\n        const group = array.slice(startIndex, startIndex + size);\n        startIndex += size;\n        return group;\n    });\n};\nexports.groupBySizes = groupBySizes;\n/**\n * Counts the number of continuous spaces in a string\n *\n * @internal\n * @example\n * countGroupSpaces('a  bc  de f') = 3\n */\nconst countSpaceSequence = (input) => {\n    var _a, _b;\n    return (_b = (_a = input.match(/\\s+/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n};\nexports.countSpaceSequence = countSpaceSequence;\n/**\n * Creates the non-increasing number array given sum and length\n * whose the difference between maximum and minimum is not greater than 1\n *\n * @internal\n * @example\n * distributeUnevenly(6, 3) = [2, 2, 2]\n * distributeUnevenly(8, 3) = [3, 3, 2]\n */\nconst distributeUnevenly = (sum, length) => {\n    const result = Array.from({ length }).fill(Math.floor(sum / length));\n    return result.map((element, index) => {\n        return element + (index < sum % length ? 1 : 0);\n    });\n};\nexports.distributeUnevenly = distributeUnevenly;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}